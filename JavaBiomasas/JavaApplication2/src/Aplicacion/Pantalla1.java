/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Aplicacion;

//import static com.sun.xml.internal.fastinfoset.alphabet.BuiltInRestrictedAlphabets.table;
import java.awt.Container;
import java.awt.Image;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author USER
 */
public class Pantalla1 extends javax.swing.JFrame {

    Pantalla1 repintar;
    inicioframe casa;
    double cant_total_biomasa = 0;
    Double[] cant_biomasa_fila;

    String[] BMP;
    String[] CarbonNitro;
    String[] SolidVolTot;
    String[] DensidadApar;

    HashMap<String, TableCellEditor> combos = new HashMap<>();
    HashMap<String, TableCellEditor> combos1 = new HashMap<>();
    DefaultTableModel modelo;
    DefaultTableModel modelo2;

    String[] items = {"ton", "AÃ±o"};
    String sustrato_consulta;
    int indice = 0;
    String tipo_B = "";

    DBConexion Miconexion = new DBConexion();

    JFrame frame;

    /**
     * Creates new form Pantalla1
     */
    public Pantalla1() {
        frame = new JFrame("Grafica");
        frame.setSize(500, 700);
        frame.setLocationRelativeTo(null);

        initComponents();
        this.setLocationRelativeTo(null);
        titulo_entrada_datos1.setVisible(false);
        jScrollPaneSustrato.setVisible(false);

        jScrollPaneCaracteristicas.setVisible(false);
        mostrar_caracteristicas.setVisible(false);
        mostrar_proceso_digestion.setVisible(false);

        titulo_proceso_digestion.setVisible(false);
        jScrollPaneRelacion_cn.setVisible(false);

        titulo_dimensionamiento.setVisible(false);
        jScrollPaneDimensionamiento.setVisible(false);
        Graficar.setVisible(false);
        mostrar_datos_dimensionamiento.setVisible(false);

        titulo_costos.setVisible(false);
        subtitulo_ingresos.setVisible(false);
        subtitulo_egresos.setVisible(false);
        jScrollPaneCostos.setVisible(false);

        titulo_viabilidad.setVisible(false);
        jScrollPaneViabilidad.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sustrato = new javax.swing.JComboBox();
        tipo_biomasa = new javax.swing.JComboBox();
        peso = new javax.swing.JComboBox();
        tiempo = new javax.swing.JComboBox();
        agricola = new javax.swing.JCheckBox();
        ganaderia = new javax.swing.JCheckBox();
        categoria = new javax.swing.JLabel();
        titulo_entrada_datos = new javax.swing.JLabel();
        iniciar = new javax.swing.JButton();
        label_agricola = new javax.swing.JLabel();
        label_ganaderia = new javax.swing.JLabel();
        label_ganaderia1 = new javax.swing.JLabel();
        No_residuos = new javax.swing.JTextField();
        label_ganaderia2 = new javax.swing.JLabel();
        temperatura = new javax.swing.JTextField();
        titulo_entrada_datos1 = new javax.swing.JLabel();
        mostrar_caracteristicas = new javax.swing.JButton();
        jScrollPaneSustrato = new javax.swing.JScrollPane();
        tabla_sustrato = new javax.swing.JTable(){
            public TableCellEditor getTableCellEditor(int row, int column) {
                int modelColumn = convertColumnIndexToModel(column);
                String valor = (String) modelo.getValueAt(row, 0);
                System.out.println("Columna 0 = " + valor);
                if (modelColumn == 0 && row < Integer.parseInt(No_residuos.getText())) {
                    return combos.get(valor);
                }
                else {
                    return super.getCellEditor(row, column);
                }
            }
        };
        jScrollPaneCaracteristicas = new javax.swing.JScrollPane();
        tabla_caracteristicas = new javax.swing.JTable(){
            public TableCellEditor getTableCellEditor(int row, int column) {
                int modelColumn = convertColumnIndexToModel(column);
                String valor = (String) modelo2.getValueAt(row, 0);
                System.out.println("Columna 0 = " + valor);
                if (modelColumn == 0 && row < Integer.parseInt(No_residuos.getText())) {
                    return combos1.get(valor);
                }
                else {
                    return super.getCellEditor(row, column);
                }
            }
        };
        jScrollPaneRelacion_cn = new javax.swing.JScrollPane();
        tabla_proceso_codigestion = new javax.swing.JTable();
        mostrar_proceso_digestion = new javax.swing.JButton();
        titulo_proceso_digestion = new javax.swing.JLabel();
        titulo_dimensionamiento = new javax.swing.JLabel();
        jScrollPaneDimensionamiento = new javax.swing.JScrollPane();
        Tabla_dimensionamiento = new javax.swing.JTable();
        Graficar = new javax.swing.JButton();
        mostrar_datos_dimensionamiento = new javax.swing.JButton();
        home = new javax.swing.JButton();
        reload = new javax.swing.JButton();
        titulo_viabilidad = new javax.swing.JLabel();
        jScrollPaneViabilidad = new javax.swing.JScrollPane();
        tabla_viabilidad = new javax.swing.JTable();
        titulo_costos = new javax.swing.JLabel();
        jScrollPaneCostos = new javax.swing.JScrollPane();
        Tabla_costos = new javax.swing.JTable();
        subtitulo_ingresos = new javax.swing.JLabel();
        subtitulo_egresos = new javax.swing.JLabel();
        autores = new javax.swing.JLabel();
        javax.swing.JLabel Imagenfondo_pantalla1 = new javax.swing.JLabel();

        sustrato.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tipo_biomasa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        peso.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tiempo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Green Biogas");
        setMinimumSize(new java.awt.Dimension(1040, 730));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });
        getContentPane().setLayout(null);

        agricola.setMargin(new java.awt.Insets(-1, -1, 0, 0));
        agricola.setOpaque(false);
        agricola.setRequestFocusEnabled(false);
        agricola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agricolaActionPerformed(evt);
            }
        });
        getContentPane().add(agricola);
        agricola.setBounds(240, 50, 17, 17);

        ganaderia.setMargin(new java.awt.Insets(-1, -1, 0, 0));
        ganaderia.setOpaque(false);
        ganaderia.setRequestFocusEnabled(false);
        ganaderia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ganaderiaActionPerformed(evt);
            }
        });
        getContentPane().add(ganaderia);
        ganaderia.setBounds(240, 80, 17, 17);

        categoria.setFont(new java.awt.Font("Verdana", 3, 14)); // NOI18N
        categoria.setText("Categoria");
        getContentPane().add(categoria);
        categoria.setBounds(90, 50, 90, 20);

        titulo_entrada_datos.setFont(new java.awt.Font("Verdana", 3, 24)); // NOI18N
        titulo_entrada_datos.setText("Datos de entrada");
        getContentPane().add(titulo_entrada_datos);
        titulo_entrada_datos.setBounds(140, 0, 240, 40);

        iniciar.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        iniciar.setText("Iniciar");
        iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarActionPerformed(evt);
            }
        });
        getContentPane().add(iniciar);
        iniciar.setBounds(190, 180, 80, 30);

        label_agricola.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        label_agricola.setText("Agricola");
        getContentPane().add(label_agricola);
        label_agricola.setBounds(180, 50, 50, 20);

        label_ganaderia.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        label_ganaderia.setText("Ganaderia");
        getContentPane().add(label_ganaderia);
        label_ganaderia.setBounds(170, 80, 70, 20);

        label_ganaderia1.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        label_ganaderia1.setText("Numero de residuos (maximo 10)");
        getContentPane().add(label_ganaderia1);
        label_ganaderia1.setBounds(90, 110, 220, 20);

        No_residuos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                No_residuosActionPerformed(evt);
            }
        });
        No_residuos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                No_residuosKeyTyped(evt);
            }
        });
        getContentPane().add(No_residuos);
        No_residuos.setBounds(330, 100, 60, 30);

        label_ganaderia2.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        label_ganaderia2.setText("Temperatura (CÂ°) - entre 15 y 35");
        getContentPane().add(label_ganaderia2);
        label_ganaderia2.setBounds(90, 150, 240, 20);

        temperatura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                temperaturaActionPerformed(evt);
            }
        });
        temperatura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                temperaturaKeyTyped(evt);
            }
        });
        getContentPane().add(temperatura);
        temperatura.setBounds(330, 140, 60, 30);

        titulo_entrada_datos1.setFont(new java.awt.Font("Verdana", 3, 24)); // NOI18N
        titulo_entrada_datos1.setText("Tabla de caracteristicas");
        getContentPane().add(titulo_entrada_datos1);
        titulo_entrada_datos1.setBounds(360, 230, 330, 40);

        mostrar_caracteristicas.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        mostrar_caracteristicas.setText("Mostrar caracteristicas");
        mostrar_caracteristicas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrar_caracteristicasActionPerformed(evt);
            }
        });
        getContentPane().add(mostrar_caracteristicas);
        mostrar_caracteristicas.setBounds(650, 220, 170, 30);

        tabla_sustrato.setAutoCreateRowSorter(true);
        tabla_sustrato.setFont(new java.awt.Font("Verdana", 2, 12)); // NOI18N
        tabla_sustrato.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabla_sustrato.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabla_sustratoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tabla_sustratoKeyTyped(evt);
            }
        });
        jScrollPaneSustrato.setViewportView(tabla_sustrato);

        getContentPane().add(jScrollPaneSustrato);
        jScrollPaneSustrato.setBounds(430, 20, 570, 190);

        tabla_caracteristicas.setAutoCreateRowSorter(true);
        tabla_caracteristicas.setFont(new java.awt.Font("Verdana", 2, 12)); // NOI18N
        tabla_caracteristicas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPaneCaracteristicas.setViewportView(tabla_caracteristicas);

        getContentPane().add(jScrollPaneCaracteristicas);
        jScrollPaneCaracteristicas.setBounds(100, 270, 850, 190);

        jScrollPaneRelacion_cn.setName(""); // NOI18N

        tabla_proceso_codigestion.setAutoCreateRowSorter(true);
        tabla_proceso_codigestion.setFont(new java.awt.Font("Verdana", 2, 12)); // NOI18N
        tabla_proceso_codigestion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPaneRelacion_cn.setViewportView(tabla_proceso_codigestion);

        getContentPane().add(jScrollPaneRelacion_cn);
        jScrollPaneRelacion_cn.setBounds(90, 510, 230, 45);

        mostrar_proceso_digestion.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        mostrar_proceso_digestion.setText("Mostrar Proceso de Co-DigestiÃ³n");
        mostrar_proceso_digestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrar_proceso_digestionActionPerformed(evt);
            }
        });
        getContentPane().add(mostrar_proceso_digestion);
        mostrar_proceso_digestion.setBounds(450, 470, 240, 30);

        titulo_proceso_digestion.setFont(new java.awt.Font("Verdana", 3, 24)); // NOI18N
        titulo_proceso_digestion.setText("Proceso de Co-DigestiÃ³n");
        getContentPane().add(titulo_proceso_digestion);
        titulo_proceso_digestion.setBounds(40, 470, 330, 40);

        titulo_dimensionamiento.setFont(new java.awt.Font("Verdana", 3, 24)); // NOI18N
        titulo_dimensionamiento.setText("Dimensionamiento");
        getContentPane().add(titulo_dimensionamiento);
        titulo_dimensionamiento.setBounds(80, 570, 260, 40);

        Tabla_dimensionamiento.setAutoCreateRowSorter(true);
        Tabla_dimensionamiento.setFont(new java.awt.Font("Verdana", 2, 12)); // NOI18N
        Tabla_dimensionamiento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPaneDimensionamiento.setViewportView(Tabla_dimensionamiento);

        getContentPane().add(jScrollPaneDimensionamiento);
        jScrollPaneDimensionamiento.setBounds(10, 610, 430, 45);
        jScrollPaneDimensionamiento.getAccessibleContext().setAccessibleName("");

        Graficar.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        Graficar.setText("Graficar");
        Graficar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GraficarActionPerformed(evt);
            }
        });
        getContentPane().add(Graficar);
        Graficar.setBounds(800, 630, 90, 30);

        mostrar_datos_dimensionamiento.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        mostrar_datos_dimensionamiento.setText("Mostrar Resultados");
        mostrar_datos_dimensionamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrar_datos_dimensionamientoActionPerformed(evt);
            }
        });
        getContentPane().add(mostrar_datos_dimensionamiento);
        mostrar_datos_dimensionamiento.setBounds(100, 560, 200, 30);

        home.setFont(new java.awt.Font("Verdana", 3, 18)); // NOI18N
        home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Aplicacion/Imagen.png"))); // NOI18N
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });
        getContentPane().add(home);
        home.setBounds(10, 10, 40, 40);

        reload.setFont(new java.awt.Font("Verdana", 2, 18)); // NOI18N
        reload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Aplicacion/Imagen1.png"))); // NOI18N
        reload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadActionPerformed(evt);
            }
        });
        getContentPane().add(reload);
        reload.setBounds(970, 640, 40, 40);

        titulo_viabilidad.setFont(new java.awt.Font("Verdana", 3, 24)); // NOI18N
        titulo_viabilidad.setText("Viabilidad");
        getContentPane().add(titulo_viabilidad);
        titulo_viabilidad.setBounds(520, 600, 150, 30);

        jScrollPaneViabilidad.setName(""); // NOI18N

        tabla_viabilidad.setAutoCreateRowSorter(true);
        tabla_viabilidad.setFont(new java.awt.Font("Verdana", 2, 12)); // NOI18N
        tabla_viabilidad.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPaneViabilidad.setViewportView(tabla_viabilidad);

        getContentPane().add(jScrollPaneViabilidad);
        jScrollPaneViabilidad.setBounds(470, 630, 230, 45);

        titulo_costos.setFont(new java.awt.Font("Verdana", 3, 24)); // NOI18N
        titulo_costos.setText("Costos (cop)");
        getContentPane().add(titulo_costos);
        titulo_costos.setBounds(680, 470, 180, 30);

        Tabla_costos.setAutoCreateRowSorter(true);
        Tabla_costos.setFont(new java.awt.Font("Verdana", 2, 12)); // NOI18N
        Tabla_costos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPaneCostos.setViewportView(Tabla_costos);

        getContentPane().add(jScrollPaneCostos);
        jScrollPaneCostos.setBounds(470, 540, 530, 45);

        subtitulo_ingresos.setFont(new java.awt.Font("Verdana", 3, 24)); // NOI18N
        subtitulo_ingresos.setText("Ingresos");
        getContentPane().add(subtitulo_ingresos);
        subtitulo_ingresos.setBounds(570, 510, 130, 30);

        subtitulo_egresos.setFont(new java.awt.Font("Verdana", 3, 24)); // NOI18N
        subtitulo_egresos.setText("Egresos");
        getContentPane().add(subtitulo_egresos);
        subtitulo_egresos.setBounds(830, 510, 110, 30);

        autores.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        autores.setText("Creadores: Daniel Esteban Martinez, Jean Paul  Cholo - Universidad EAN");
        getContentPane().add(autores);
        autores.setBounds(10, 670, 350, 14);

        Imagenfondo_pantalla1.setBackground(new java.awt.Color(255, 255, 255));
        Imagenfondo_pantalla1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Aplicacion/large.jpg"))); // NOI18N
        Imagenfondo_pantalla1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Imagenfondo_pantalla1.setPreferredSize(new java.awt.Dimension(1028, 609));
        getContentPane().add(Imagenfondo_pantalla1);
        Imagenfondo_pantalla1.setBounds(0, 0, 1040, 760);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agricolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agricolaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_agricolaActionPerformed

    private void ganaderiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ganaderiaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ganaderiaActionPerformed

    private void iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarActionPerformed
        boolean agri = false;
        boolean ganad = false;
        if (agricola.isSelected()) {
            agri = true;
        }
        if (ganaderia.isSelected()) {
            ganad = true;
        }
        if (No_residuos.getText().equals("") || temperatura.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Por favor ingrese los datos faltantes");
        } else {
            int no_residuos = Integer.parseInt(No_residuos.getText());
            int C_temperatura = Integer.parseInt(temperatura.getText());
            if (C_temperatura < 15 || C_temperatura > 35 || no_residuos > 10) {
                JOptionPane.showMessageDialog(null, "ingrese los datos entre los rangos permitidos");
            } else {
                if (agri == false && ganad == false) {
                    JOptionPane.showMessageDialog(null, "Seleccione al menos una categoria");
                } else {
                    //String cadena = No_residuos.getText(); // eso es todo , ahora si deseas imprimir lo que guardaste
                    iniciar.setVisible(false);
                    Object filas = null;
                    Object No_row[] = {filas};
                    TableColumn col1 = tabla_sustrato.getColumnModel().getColumn(0);
                    TableColumn col2 = tabla_sustrato.getColumnModel().getColumn(1);

                    TableColumn col4 = tabla_sustrato.getColumnModel().getColumn(3);
                    TableColumn col5 = tabla_sustrato.getColumnModel().getColumn(4);
                    sustrato = new JComboBox();
                    tipo_biomasa = new JComboBox();
                    peso = new JComboBox();
                    tiempo = new JComboBox();

                    sustrato.removeAllItems();
                    int categoria = 0;
                    ResultSet missustratos;

                    if ((agricola.isSelected()) && (ganaderia.isSelected())) {
                       
                        missustratos = Miconexion.getQuery("SELECT nombresustrato FROM sustratos"); //CONSULTA A LA BD
                        
                    } else if ((agricola.isSelected())) {

                        missustratos = Miconexion.getQuery("SELECT nombresustrato FROM sustratos WHERE categoria=1"); //CONSULTA A LA BD                   }else{

                    }else {
                        missustratos = Miconexion.getQuery("SELECT nombresustrato FROM sustratos WHERE categoria=2"); //CONSULTA A LA BD                   }else{
                    }

                    String cultivoUbActual = "";

                    try {
                        while (missustratos.next()) {

                            cultivoUbActual = missustratos.getString("nombresustrato");
                            sustrato.addItem(cultivoUbActual);
                        }
                    } catch (SQLException ex) {
                        System.out.println("Error consulta sustratosUbicacion Actual");
                    }

                    sustrato.addItemListener(new ItemListener() {

                        @Override
                        public void itemStateChanged(ItemEvent e) {
                       // Object elemento=e.getSource();
                            // if(elemento.equals(tipo_biomasa))
                            // {

                            //}
                            // else
                            // {
                            if (e.getStateChange() == ItemEvent.SELECTED) {
                                sustrato_consulta = e.getItem().toString();

                                ResultSet tipobiomasa_bd = Miconexion.getQuery("SELECT tipo_biomasa FROM caracteristicassustratos WHERE nombre_cultivo = '" + sustrato_consulta + "' ");

                                DefaultTableModel modelo = (DefaultTableModel) tabla_sustrato.getModel();

                                tipo_B = "";

                                try {
                                    tipo_biomasa.removeAllItems();
                                    while (tipobiomasa_bd.next()) {     //mientras halla datos haga
                                        tipo_B = tipobiomasa_bd.getString("tipo_biomasa");
                                        tipo_biomasa.addItem(tipo_B);

                                        modelo.setValueAt(items[0], tabla_sustrato.getSelectedRow(), 3);
                                        modelo.setValueAt(items[1], tabla_sustrato.getSelectedRow(), 4);
                                    }
                                } catch (SQLException ex) {
                                    Logger.getLogger(Pantalla2.class.getName()).log(Level.SEVERE, null, ex);
                                    System.out.printf("Error consulta tipo_biomasa_consulta Actual");
                                    JOptionPane.showMessageDialog(null,"error consulta","Error consulta tipo_biomasa_consulta Actual",JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        }

                    });

                    col1.setCellEditor(new DefaultCellEditor(sustrato));
                    col2.setCellEditor(new DefaultCellEditor(tipo_biomasa));
                    col4.setCellEditor(new DefaultCellEditor(peso));
                    col5.setCellEditor(new DefaultCellEditor(tiempo));

                    for (int i = 0; i < no_residuos; i++) {
                        ((DefaultTableModel) tabla_sustrato.getModel()).addRow(No_row);
                        //tabla_caracteristicas.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
                    }

                    this.peso.addItem("kg");
                    this.peso.addItem("ton");
                    this.tiempo.addItem("Dia");
                    this.tiempo.addItem("Mes");
                    this.tiempo.addItem("AÃ±o");

                    ((DefaultTableCellRenderer) tabla_sustrato.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

                    DefaultTableCellRenderer modelo = new DefaultTableCellRenderer();
                    modelo.setHorizontalAlignment(SwingConstants.CENTER);
                    for (int i = 0; i < 5; i++) {
                        tabla_sustrato.getColumnModel().getColumn(i).setCellRenderer(modelo);
                    }

                    mostrar_caracteristicas.setVisible(true);
                    agricola.disable();
                    ganaderia.disable();
                    No_residuos.disable();
                    temperatura.disable();
                    jScrollPaneSustrato.setVisible(true);
                    //tabla_caracteristicas.setVisible(true);

                }
            }
    }//GEN-LAST:event_iniciarActionPerformed
    }
    private void No_residuosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_No_residuosActionPerformed

    }//GEN-LAST:event_No_residuosActionPerformed

    private void No_residuosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_No_residuosKeyTyped
        char car = evt.getKeyChar();
        if (No_residuos.getText().length() > 1) {
            evt.consume();
        }
        if (car < '0' || car > '9') {
            evt.consume();
        }
    }//GEN-LAST:event_No_residuosKeyTyped

    private void temperaturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_temperaturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_temperaturaActionPerformed

    private void temperaturaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_temperaturaKeyTyped
        char car = evt.getKeyChar();
        if (No_residuos.getText().length() > 2) {
            evt.consume();
        }
        if (car < '0' || car > '9') {
            evt.consume();
        }
    }//GEN-LAST:event_temperaturaKeyTyped

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        ImageIcon FondoFrame = new ImageIcon("src/Aplicacion/Large.jpg");
        //Icon iconoFondo = new ImageIcon(FondoFrame.getImage().getScaledInstance(Imagenfondo_pantalla1.getWidth(), Imagenfondo_pantalla1.getHeight(), Image.SCALE_DEFAULT));
        //Imagenfondo_pantalla1.setIcon(iconoFondo);

        this.repaint();

        modelo = (DefaultTableModel) tabla_sustrato.getModel();

        modelo.addColumn("Sustrato");
        modelo.addColumn("Tipo de biomasa");
        modelo.addColumn("Cant de sustrato");
        modelo.addColumn("Unidad de Peso");
        modelo.addColumn("Unidad de Tiempo");

        modelo2 = (DefaultTableModel) tabla_caracteristicas.getModel();

        modelo2.addColumn("Tipo de Biomasa");
        modelo2.addColumn("Proporcion");
        modelo2.addColumn("RelaciÃ³n C/N");
        modelo2.addColumn("Potencial de Metano");
        modelo2.addColumn("% SV");
        modelo2.addColumn("Densidad aparente");

        DefaultTableModel modelo3 = (DefaultTableModel) tabla_proceso_codigestion.getModel();

        modelo3.addColumn("C/N");
        modelo3.addColumn("Biogas Producido (m3/aÃ±o)");

        DefaultTableModel modelo4 = (DefaultTableModel) Tabla_dimensionamiento.getModel();

        modelo4.addColumn("Volumen Digestor (m3)");
        modelo4.addColumn("Potencia Producida");
        modelo4.addColumn("Energia Producida");

        DefaultTableModel modelo5 = (DefaultTableModel) Tabla_costos.getModel();

        modelo5.addColumn("Venta energia");
        modelo5.addColumn("Venta Digestato");
        modelo5.addColumn("OperaciÃ³n");
        modelo5.addColumn("Mantenimiento");
        modelo5.addColumn("Financieros");

        DefaultTableModel modelo6 = (DefaultTableModel) tabla_viabilidad.getModel();

        modelo6.addColumn("InversiÃ³n");
        modelo6.addColumn("Viabilidad");
    }//GEN-LAST:event_formWindowOpened

    private double redondear(double numero) {
        String val = numero + "";
        BigDecimal big = new BigDecimal(val);
        big = big.setScale(4, RoundingMode.HALF_UP);
        double redondeo = big.doubleValue();
        return redondeo;
    }

    private double redondeara2(double numero) {
        String val = numero + "";
        BigDecimal big = new BigDecimal(val);
        big = big.setScale(2, RoundingMode.HALF_UP);
        double redondeo = big.doubleValue();
        return redondeo;
    }


    private void mostrar_caracteristicasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrar_caracteristicasActionPerformed
        //validar que no queden celdas vacias al ingresar los datos
        boolean vacio = false;
        for (int i = 0; i < Integer.parseInt(No_residuos.getText()); i++) {
            for (int j = 0; j <= 4; j++) {
                if (String.valueOf(tabla_sustrato.getValueAt(i, j)).equals("null")) {
                    vacio = true;
                }
            }
        }

        if (vacio == true) {
            JOptionPane.showMessageDialog(null, "por favor introduzca todos los datos en la tabla");
        } else {

            String[] datos_tipo_biomas = new String[Integer.parseInt(No_residuos.getText())];
            String[] datos_sustrato = new String[Integer.parseInt(No_residuos.getText())];

            BMP = new String[Integer.parseInt(No_residuos.getText())];
            CarbonNitro = new String[Integer.parseInt(No_residuos.getText())];
            SolidVolTot = new String[Integer.parseInt(No_residuos.getText())];
            DensidadApar = new String[Integer.parseInt(No_residuos.getText())];

            DefaultTableModel modelo1 = (DefaultTableModel) tabla_caracteristicas.getModel();

            for (int i = 0; i < Integer.parseInt(No_residuos.getText()); i++) {
                datos_sustrato[i] = String.valueOf(tabla_sustrato.getValueAt(i, 0));  //tipo biomasa seleccionados
                datos_tipo_biomas[i] = String.valueOf(tabla_sustrato.getValueAt(i, 1));  //tipo biomasa seleccionados

                ResultSet Caracteristic = Miconexion.getQuery("SELECT BMP, Rel_CarbonoNitrogeno, SolidosVolatiles, DensidadAparente  FROM caracteristicassustratos WHERE tipo_biomasa= '" + datos_tipo_biomas[i] + "' ");
                try {
                    Caracteristic.next();
                    BMP[i] = Caracteristic.getString("BMP");
                    CarbonNitro[i] = Caracteristic.getString("Rel_CarbonoNitrogeno");
                    SolidVolTot[i] = Caracteristic.getString("SolidosVolatiles");
                    DensidadApar[i] = Caracteristic.getString("DensidadAparente");
                } catch (SQLException ex) {
                    Logger.getLogger(Pantalla1.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null,"error consulta","error consulta  tabla caracteristicas sustratos",JOptionPane.ERROR_MESSAGE);
                }
            }

            tabla_sustrato.disable();
            mostrar_caracteristicas.setVisible(false);

            //hacer arreglos para guardar la informaciÃ³n de la otra tabla para hacer las formulas o solo pasar datos
            //
            String[] datos_tipo_biomasa = new String[Integer.parseInt(No_residuos.getText())];

            Double[] datos_proporcion = new Double[Integer.parseInt(No_residuos.getText())];
            String[] datos_cant_biomasa = new String[Integer.parseInt(No_residuos.getText())];
            String[] column_peso = new String[Integer.parseInt(No_residuos.getText())];
            String[] column_tiempo = new String[Integer.parseInt(No_residuos.getText())];
            Double[] conversion_peso = new Double[Integer.parseInt(No_residuos.getText())];
            Double[] conversion_tiempo = new Double[Integer.parseInt(No_residuos.getText())];

            cant_biomasa_fila = new Double[Integer.parseInt(No_residuos.getText())];

            //guardar la informaciÃ³n dentro de los arreglos
            for (int i = 0; i < Integer.parseInt(No_residuos.getText()); i++) {
                datos_tipo_biomasa[i] = String.valueOf(tabla_sustrato.getValueAt(i, 1));  //tipo biomasa seleccionados

                //datos columna cant_biomasa y calculos
                datos_cant_biomasa[i] = String.valueOf(tabla_sustrato.getValueAt(i, 2));  //cantidad biomasa
                column_peso[i] = String.valueOf(tabla_sustrato.getValueAt(i, 3));  //peso seleccionados
                column_tiempo[i] = String.valueOf(tabla_sustrato.getValueAt(i, 4));  //tiempo seleccionados
                if (column_peso[i].equals("kg")) {
                    conversion_peso[i] = (Double.parseDouble(datos_cant_biomasa[i]) / 1000);    //convertir de kg a ton
                    //conversion_peso[i]=redondear(conversion_peso[i]);
                } else {
                    conversion_peso[i] = Double.parseDouble(datos_cant_biomasa[i]);
                    //conversion_peso[i]=redondear(conversion_peso[i]);
                }

                if (column_tiempo[i].equals("Dia")) {
                    conversion_tiempo[i] = (conversion_peso[i] * 365);
                    //conversion_tiempo[i]=redondear(conversion_tiempo[i]);
                } else {
                    if (column_tiempo[i].equals("Mes")) {
                        conversion_tiempo[i] = (conversion_peso[i] * 12);
                        //conversion_tiempo[i]=redondear(conversion_tiempo[i]);
                    } else {
                        conversion_tiempo[i] = conversion_peso[i];
                        //conversion_tiempo[i]=redondear(conversion_tiempo[i]);
                    }
                }
                System.out.println(conversion_tiempo[i]+"    "+i);
                cant_biomasa_fila[i] = conversion_tiempo[i];
                cant_total_biomasa = (conversion_tiempo[i] + cant_total_biomasa);
                //String.valueOf(tabla_sustrato.getValueAt(tabla_sustrato.getSelectedColumn(), 4))  //seleccionar una o mas column
            }

            for (int i = 0; i < Integer.parseInt(No_residuos.getText()); i++) {
                datos_proporcion[i] = (100 * conversion_tiempo[i]);
                datos_proporcion[i] = (datos_proporcion[i] / cant_total_biomasa);

                datos_proporcion[i] = redondear(datos_proporcion[i]);
            }

            //colocar las filas necesarias e incluilas en este mismo for
            Object filas = null;
            Object No_row[] = {filas};
            for (int i = 0; i < Integer.parseInt(No_residuos.getText()); i++) {
                ((DefaultTableModel) tabla_caracteristicas.getModel()).addRow(No_row);   //abrir filas para ingresar datos
                tabla_caracteristicas.setValueAt(datos_tipo_biomasa[i], i, 0);  //datos colocados en columna tipo de biomasa
                tabla_caracteristicas.setValueAt((datos_proporcion[i]), i, 1);  //datos colocados en columna proporcion

                tabla_caracteristicas.setValueAt((BMP[i]), i, 3);  //datos colocados en columna bmp
                tabla_caracteristicas.setValueAt((CarbonNitro[i]), i, 2);  //datos colocados en columna c/n
                tabla_caracteristicas.setValueAt((SolidVolTot[i]), i, 4);  //datos colocados en columna solidos volatiles
                tabla_caracteristicas.setValueAt((DensidadApar[i]), i, 5);  //datos colocados en columna densidad apartente

            }

            //las celdas de los titulos queden centrados
            ((DefaultTableCellRenderer) tabla_caracteristicas.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

            //las celdas donde estan los datos queden centrados
            DefaultTableCellRenderer modelo2 = new DefaultTableCellRenderer();
            modelo2.setHorizontalAlignment(SwingConstants.CENTER);
            for (int i = 0; i < 6; i++) {
                tabla_caracteristicas.getColumnModel().getColumn(i).setCellRenderer(modelo2);
            }

            titulo_entrada_datos1.setVisible(true);
            jScrollPaneCaracteristicas.setVisible(true);
            mostrar_proceso_digestion.setVisible(true);
        }
    }//GEN-LAST:event_mostrar_caracteristicasActionPerformed

    private void tabla_sustratoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabla_sustratoKeyTyped
        TableColumn col3 = tabla_sustrato.getColumnModel().getColumn(2);
        //DefaultTableModel modelo = (DefaultTableModel)tabla_sustrato.getModel();
        //String dato=String.valueOf(modelo.getValueAt(tabla_sustrato.getSelectedRow(),2));
        char car = evt.getKeyChar();
        if (car < '0' || car > '9') {
            evt.consume();
        }
    }//GEN-LAST:event_tabla_sustratoKeyTyped

    private void mostrar_proceso_digestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrar_proceso_digestionActionPerformed
        tabla_caracteristicas.disable();
        mostrar_proceso_digestion.setVisible(false);

        String[] C_N = new String[Integer.parseInt(No_residuos.getText())];
        String[] proporcion = new String[Integer.parseInt(No_residuos.getText())];
        String[] potencial_metano = new String[Integer.parseInt(No_residuos.getText())];
        String[] porcen_solid_volatiles = new String[Integer.parseInt(No_residuos.getText())];
        double calculo_pro_cn = 0;

        //hallar relacion C/N
        double ayuda_variable_calcular = 0;

        //hallar biogas producido
        double ton_sus_aÃ±o = 0;
        double particion = 0;
        double total_biogas_producido1 = 0;
        double total_biogas_producido2 = 0;
        double total_biogas_producido = 0;

        for (int i = 0; i < Integer.parseInt(No_residuos.getText()); i++) {
            proporcion[i] = String.valueOf(tabla_caracteristicas.getValueAt(i, 1));  //Proporcion de la tabla caracteristicas
            C_N[i] = String.valueOf(tabla_caracteristicas.getValueAt(i, 2));  //Relacion C_N de la tabla caracteristicas
            potencial_metano[i] = String.valueOf(tabla_caracteristicas.getValueAt(i, 3));  //Potencial de metano de la tabla caracteristicas
            porcen_solid_volatiles[i] = String.valueOf(tabla_caracteristicas.getValueAt(i, 4));  //%solidos volatiles de la tabla caracteristicas

            //datos con las formulas
            ayuda_variable_calcular = (Double.parseDouble(proporcion[i]) / 100);
            ayuda_variable_calcular = ayuda_variable_calcular * Double.parseDouble(C_N[i]);
            calculo_pro_cn = ayuda_variable_calcular + calculo_pro_cn;
            ayuda_variable_calcular = 0;

            //hallar biogas producido
            System.out.println(cant_biomasa_fila[i]+"  cant fila  "+i);
            System.out.println(porcen_solid_volatiles[i]+"  %SV  "+i);
            ton_sus_aÃ±o = cant_biomasa_fila[i] / Double.parseDouble(porcen_solid_volatiles[i]);
            System.out.println(ton_sus_aÃ±o+" tonelada aÃ±o  "+i);
            particion = ton_sus_aÃ±o / cant_total_biomasa;
            System.out.println(particion+" participacion  "+i);
            total_biogas_producido1 = ton_sus_aÃ±o * particion;
            System.out.println(total_biogas_producido1+" total tonelada con participacion  "+i);
            total_biogas_producido2 = total_biogas_producido1 * Double.parseDouble(potencial_metano[i]);
            System.out.println(total_biogas_producido2+" total con bmp  "+i);            
            total_biogas_producido = total_biogas_producido2 + total_biogas_producido;
            System.out.println(total_biogas_producido+" total TOTAL   "+i);            

            ton_sus_aÃ±o = 0;
            particion = 0;
            total_biogas_producido1 = 0;
            total_biogas_producido2 = 0;

        }
        calculo_pro_cn = redondeara2(calculo_pro_cn);
        total_biogas_producido = redondeara2(total_biogas_producido);

        //colocar las filas necesarias e incluilas en este mismo for
        Object filas = null;
        Object No_row[] = {filas};
        ((DefaultTableModel) tabla_proceso_codigestion.getModel()).addRow(No_row);   //abrir filas para ingresar datos
        tabla_proceso_codigestion.setValueAt(calculo_pro_cn, 0, 0);  //datos colocados en columna C/N
        tabla_proceso_codigestion.setValueAt(total_biogas_producido, 0, 1);  //datos colocados en columna biogas producido     CAMBIAR!!!!

        //las celdas de los titulos queden centrados
        ((DefaultTableCellRenderer) tabla_proceso_codigestion.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

        //las celdas donde estan los datos queden centrados
        DefaultTableCellRenderer modelo2 = new DefaultTableCellRenderer();
        modelo2.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < 2; i++) {
            tabla_proceso_codigestion.getColumnModel().getColumn(i).setCellRenderer(modelo2);
        }

        titulo_proceso_digestion.setVisible(true);
        jScrollPaneRelacion_cn.setVisible(true);
        mostrar_datos_dimensionamiento.setVisible(true);
        tabla_caracteristicas.disable();
    }//GEN-LAST:event_mostrar_proceso_digestionActionPerformed


    private void GraficarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GraficarActionPerformed
        String[] datos_tipo_biomasa = new String[Integer.parseInt(No_residuos.getText())];
        String[] datos_cant_biomasa = new String[Integer.parseInt(No_residuos.getText())];
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (int i = 0; i < Integer.parseInt(No_residuos.getText()); i++) {
            datos_tipo_biomasa[i] = String.valueOf(tabla_caracteristicas.getValueAt(i, 0));  //tipo biomasa seleccionados

            //datos columna cant_biomasa y calculos
            datos_cant_biomasa[i] = String.valueOf(tabla_caracteristicas.getValueAt(i, 3));  //cantidad biomasa

            dataset.setValue(Double.parseDouble(datos_cant_biomasa[i]), "BMP", datos_tipo_biomasa[i]);

        }

        JFreeChart chart = ChartFactory.createBarChart("Potencial de Metano", "Tipo de biomasa", "BMP(m3/kg SV)", dataset, PlotOrientation.VERTICAL, true, true, true);

        ChartPanel charpanel = new ChartPanel(chart, false);
        frame.setContentPane(charpanel);
        frame.setVisible(true);
    }//GEN-LAST:event_GraficarActionPerformed

    private void mostrar_datos_dimensionamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrar_datos_dimensionamientoActionPerformed
        //hallar volumen digestor 
        double volumen_residuos = 0;
        double ayuda_volumen_digestor = 0;
        double volumen_digestor = 0;
        double ayuda_volumen_residuos = 0;
        double ayuda_volumen_residuos2 = 0;

        for (int i = 0; i < Integer.parseInt(No_residuos.getText()); i++) {
            ayuda_volumen_residuos = (cant_biomasa_fila[i] / cant_total_biomasa);
            ayuda_volumen_residuos2 = (Double.parseDouble(String.valueOf(tabla_caracteristicas.getValueAt(i, 5))) * ayuda_volumen_residuos);
            ayuda_volumen_residuos2 = (cant_total_biomasa / ayuda_volumen_residuos2);
            //ayuda_volumen_residuos3=ayuda_volumen_residuos*ayuda_volumen_residuos2;
            volumen_residuos = ayuda_volumen_residuos2 + (volumen_residuos);
            ayuda_volumen_residuos = 0;
            ayuda_volumen_residuos2 = 0;
        }
        //volumen_digestor=(Double)(volumen_residuos*0.08219178);
        ayuda_volumen_digestor = (volumen_residuos / 365);
        ayuda_volumen_digestor = redondeara2(ayuda_volumen_digestor);
        volumen_digestor = (ayuda_volumen_digestor * 30);
        volumen_digestor = redondeara2(volumen_digestor);

        //hallar potencia producida
        double potencia_producida = 0;
        double ayuda_potencia_producida = 0;
        double ayuda_potencia_producida2 = 0;
        double ayuda_potencia_producida3 = 0;
        double ayuda_potencia_producida4 = 0;
        double ayuda_potencia_producida5 = 0;
        double ayuda_potencia_producida6 = 0;
        double ayuda_potencia_producida7 = 0;

        //potencia_producida=(Double)((Double.parseDouble(String.valueOf(tabla_proceso_codigestion.getValueAt(0, 1)))*9000*4.18*(1/365*24*60*60))*0.35);
        ayuda_potencia_producida = Double.parseDouble(String.valueOf(tabla_proceso_codigestion.getValueAt(0, 1))) * 9000;

        ayuda_potencia_producida2 = ayuda_potencia_producida * 4.18;
        ayuda_potencia_producida3 = (365 * 24);
        ayuda_potencia_producida4 = (ayuda_potencia_producida3 * 60);
        ayuda_potencia_producida5 = (ayuda_potencia_producida4 * 60);
        ayuda_potencia_producida6 = (1 / ayuda_potencia_producida5);

        ayuda_potencia_producida7 = ayuda_potencia_producida2 * ayuda_potencia_producida6;

        potencia_producida = ayuda_potencia_producida7 * 0.35;
        potencia_producida = redondeara2(potencia_producida);

        //hallar calculos de COSTOS
        //inversiÃ³n
        double inversion = 0;
        double ayuda_inversion = 0;
        double ayuda_inversion1 = 0;

        ayuda_inversion = (potencia_producida / 500);
        ayuda_inversion = redondeara2(ayuda_inversion);

        ayuda_inversion1 = Math.pow(ayuda_inversion, 0.6);
        ayuda_inversion1 = redondeara2(ayuda_inversion1);

        inversion = 5228426833.21 * ayuda_inversion1;
        inversion = redondeara2(inversion);
        //String cortar_inversion = String.format("%.2f", inversion);
        //inversion = Double.parseDouble(cortar_inversion);

        //hallar costos operacion
        double costos_operacion = 0;
        double costos_mantenimiento = 0;
        double costos_financieros = 0;

        costos_operacion = inversion * 1.6664;
        costos_operacion = redondeara2(costos_operacion);

        costos_mantenimiento = inversion * 0.15;
        costos_mantenimiento = redondeara2(costos_mantenimiento);

        costos_financieros = inversion * 0.25;
        costos_financieros = redondeara2(costos_financieros);

        //hallar energia producida
        double energia_producida = 0;
        double energia_producida1 = 0;
        energia_producida1 = (potencia_producida * 365);
        energia_producida = (energia_producida1 * 24);
        energia_producida = redondeara2(energia_producida);

        //hallar ingresos
        double venta_energia = 0;
        venta_energia = energia_producida / 8760;
        venta_energia = venta_energia * 165.12;
        venta_energia = venta_energia * 8760;
        venta_energia = redondeara2(venta_energia);

        //hallar venta digestato
        double venta_digestato = 0;
        double ayuda_venta_digestato = 0;
        ayuda_venta_digestato = cant_total_biomasa * 0.25;
        venta_digestato = ayuda_venta_digestato * 200000;
        venta_digestato = redondeara2(venta_digestato);

        //hallar si es viable o no
        double cant_total_ingresos = 0;
        double cant_total_egresos = 0;
        double viabilidad_calculo = 0;

        cant_total_ingresos = venta_energia + venta_digestato;
        cant_total_egresos = costos_mantenimiento + costos_operacion + costos_financieros;
        viabilidad_calculo = cant_total_ingresos - cant_total_egresos;
        viabilidad_calculo = redondeara2(viabilidad_calculo);

        String mensaje_viabilidad = "";

        if (viabilidad_calculo > 0) {
            mensaje_viabilidad = "Es viable";
        } else {
            mensaje_viabilidad = "No es viable";
        }

        //colocar las filas necesarias e incluilas en este mismo for
        Object filas = null;
        Object No_row[] = {filas};
        ((DefaultTableModel) Tabla_dimensionamiento.getModel()).addRow(No_row);   //abrir filas para ingresar datos
        ((DefaultTableModel) Tabla_costos.getModel()).addRow(No_row);   //abrir filas para ingresar datos
        ((DefaultTableModel) tabla_viabilidad.getModel()).addRow(No_row);   //abrir filas para ingresar datos

        //dimensionamiento
        Tabla_dimensionamiento.setValueAt(volumen_digestor, 0, 0);  //datos colocados en la columna volumen digestor
        Tabla_dimensionamiento.setValueAt(potencia_producida, 0, 1);    //datos colocados en la columna potencia producida
        Tabla_dimensionamiento.setValueAt(energia_producida, 0, 2);     //datos colocados en la columna energia producida

        //costos
        Tabla_costos.setValueAt(venta_energia, 0, 0);
        Tabla_costos.setValueAt(venta_digestato, 0, 1);
        Tabla_costos.setValueAt(costos_mantenimiento, 0, 2);
        Tabla_costos.setValueAt(costos_operacion, 0, 3);
        Tabla_costos.setValueAt(costos_financieros, 0, 4);

        //viabilidad
        tabla_viabilidad.setValueAt(inversion, 0, 0);
        tabla_viabilidad.setValueAt(mensaje_viabilidad, 0, 1);

        //las celdas de los titulos queden centrados
        ((DefaultTableCellRenderer) Tabla_dimensionamiento.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
        ((DefaultTableCellRenderer) Tabla_costos.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
        ((DefaultTableCellRenderer) tabla_viabilidad.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);

        //las celdas donde estan los datos queden centrados
        DefaultTableCellRenderer modelo2 = new DefaultTableCellRenderer();
        modelo2.setHorizontalAlignment(SwingConstants.CENTER);

        for (int i = 0; i < 3; i++) {
            Tabla_dimensionamiento.getColumnModel().getColumn(i).setCellRenderer(modelo2);
        }

        for (int i = 0; i < 5; i++) {
            Tabla_costos.getColumnModel().getColumn(i).setCellRenderer(modelo2);
        }

        for (int i = 0; i < 2; i++) {
            tabla_viabilidad.getColumnModel().getColumn(i).setCellRenderer(modelo2);
        }

        mostrar_datos_dimensionamiento.setVisible(false);
        titulo_dimensionamiento.setVisible(true);
        jScrollPaneDimensionamiento.setVisible(true);

        titulo_costos.setVisible(true);
        subtitulo_ingresos.setVisible(true);
        subtitulo_egresos.setVisible(true);
        jScrollPaneCostos.setVisible(true);

        titulo_viabilidad.setVisible(true);
        jScrollPaneViabilidad.setVisible(true);

        Graficar.setVisible(true);
    }//GEN-LAST:event_mostrar_datos_dimensionamientoActionPerformed

    private void homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeActionPerformed
        dispose();
        casa = new inicioframe();
        casa.setVisible(true);
    }//GEN-LAST:event_homeActionPerformed

    private void reloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadActionPerformed
        dispose();
        repintar = new Pantalla1();
        repintar.setVisible(true);
    }//GEN-LAST:event_reloadActionPerformed

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyTyped

    private void tabla_sustratoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabla_sustratoKeyPressed

    }//GEN-LAST:event_tabla_sustratoKeyPressed

    //ingresar una cantidad de sustrato
    //suma de lo que ingreso mas lo que hay disponible
    //cant usuario digita y la cant disponible 
    //hacer un recuadro donde la persona 
    //seleccion de categoria se hagan
    //mezclando los de la primera tabla mas la ubicaciÃ³n actual
    //tabla bien pegada a mano izquierda los datos de entrada
    //tabla de digestion, dimensionamiento y costos
    //costos: 2 
    //ingresos y costos      
    //ingresos por venta de enriga
    //ingresos por venta de digestato
    //viabilidad: escribir si es viable o no es viable
    //llamar esos mismos datos, hacer los mismo calculos, pero con los datos de la segunda pestaÃ±a
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pantalla1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pantalla1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pantalla1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pantalla1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pantalla1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Graficar;
    public javax.swing.JTextField No_residuos;
    private javax.swing.JTable Tabla_costos;
    private javax.swing.JTable Tabla_dimensionamiento;
    private javax.swing.JCheckBox agricola;
    private javax.swing.JLabel autores;
    private javax.swing.JLabel categoria;
    private javax.swing.JCheckBox ganaderia;
    private javax.swing.JButton home;
    private javax.swing.JButton iniciar;
    private javax.swing.JScrollPane jScrollPaneCaracteristicas;
    private javax.swing.JScrollPane jScrollPaneCostos;
    private javax.swing.JScrollPane jScrollPaneDimensionamiento;
    private javax.swing.JScrollPane jScrollPaneRelacion_cn;
    private javax.swing.JScrollPane jScrollPaneSustrato;
    private javax.swing.JScrollPane jScrollPaneViabilidad;
    private javax.swing.JLabel label_agricola;
    private javax.swing.JLabel label_ganaderia;
    private javax.swing.JLabel label_ganaderia1;
    private javax.swing.JLabel label_ganaderia2;
    private javax.swing.JButton mostrar_caracteristicas;
    private javax.swing.JButton mostrar_datos_dimensionamiento;
    private javax.swing.JButton mostrar_proceso_digestion;
    private javax.swing.JComboBox peso;
    private javax.swing.JButton reload;
    private javax.swing.JLabel subtitulo_egresos;
    private javax.swing.JLabel subtitulo_ingresos;
    private javax.swing.JComboBox sustrato;
    public javax.swing.JTable tabla_caracteristicas;
    private javax.swing.JTable tabla_proceso_codigestion;
    private javax.swing.JTable tabla_sustrato;
    private javax.swing.JTable tabla_viabilidad;
    private javax.swing.JTextField temperatura;
    private javax.swing.JComboBox tiempo;
    private javax.swing.JComboBox tipo_biomasa;
    private javax.swing.JLabel titulo_costos;
    private javax.swing.JLabel titulo_dimensionamiento;
    private javax.swing.JLabel titulo_entrada_datos;
    private javax.swing.JLabel titulo_entrada_datos1;
    private javax.swing.JLabel titulo_proceso_digestion;
    private javax.swing.JLabel titulo_viabilidad;
    // End of variables declaration//GEN-END:variables
}
